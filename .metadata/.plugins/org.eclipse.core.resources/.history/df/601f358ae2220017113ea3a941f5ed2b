package bd;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class FriendTools {
	
	public static JSONObject getFriendList(int id) throws BDException{
		JSONObject l=new JSONObject();
		
		JSONArray following =new JSONArray();
		JSONArray followed =new JSONArray();
		try{
			
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			Connection c = Database.getMySQLConnection();
			
			
			String query = "SELECT `to` FROM Friends WHERE `from`=?";

			PreparedStatement pstmt = c.prepareStatement(query);
			pstmt.setInt(1, id);
			
			ResultSet rs=pstmt.executeQuery();
			
			while(rs.next()){
				
				following.put(getFriend(id,rs.getInt(1)));
				
			}
			
			String query2 = "SELECT `from` FROM Friends WHERE `to`=?";

			PreparedStatement pstmt2 = c.prepareStatement(query2);
			pstmt2.setInt(1, id);
			
			ResultSet rs2=pstmt2.executeQuery();
			
			while(rs2.next()){
				followed.put(getFriend(id,rs2.getInt(1)));
			}
			
			
			l.put("followed", followed);
			l.put("following", following);
			
			rs.close();
			pstmt.close();
			rs2.close();
			pstmt2.close();
			c.close();
		
		}catch(Exception e){
			throw new BDException("Echec getFriendList "+e.getMessage());
		}
		return l;
	}
	
	
	public static JSONObject getFriendList(String token) throws BDException{
		int moi;
		try{
	
			moi=Session.getIdUser(token);
			return getFriendList(moi);

		
		}catch(Exception e){
			throw new BDException("Echec getFriendList "+e.getMessage());
		}
	}
	
	public static JSONObject getFriend(int id1, int id) throws BDException{
		JSONObject f=new JSONObject();
		try{	
			
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			Connection c = Database.getMySQLConnection();
			
			if(!isFriend(id1,id)){
				c.close();
				return f;
			}
			
			String query = "SELECT nom,prenom,id,login FROM USER WHERE id=?";

			PreparedStatement pstmt = c.prepareStatement(query);
			pstmt.setInt(1, id);

			
			ResultSet rs = pstmt.executeQuery();

			
			if (rs.next()){
				f.put("nom", rs.getString(1));
				f.put("prenom", rs.getString(2));
				f.put("id", rs.getString(3));
				f.put("login", rs.getString(4));
			}
				
			rs.close();
			pstmt.close();
			c.close();
	
		}catch(Exception e){
			throw new BDException("Echec getFriend "+ e.getMessage());
		}
		return f;
	}
	
	public static JSONObject getFriend(String token, int id) throws BDException{
		JSONObject f=new JSONObject();
		try{	
			
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			Connection c = Database.getMySQLConnection();
			
			if(!isFriend(token,id)){
				c.close();
				return f;
			}
			
			String query = "SELECT nom,prenom,id,login FROM USER WHERE id=?";

			PreparedStatement pstmt = c.prepareStatement(query);
			pstmt.setInt(1, id);

			
			ResultSet rs = pstmt.executeQuery();

			
			if (rs.next()){
				f.put("nom", rs.getString(1));
				f.put("prenom", rs.getString(2));
				f.put("id", rs.getString(3));
				f.put("login", rs.getString(4));
			}
				
			rs.close();
			pstmt.close();
			c.close();
	
		}catch(Exception e){
			throw new BDException("Echec getFriend "+ e.getMessage());
		}
		return f;
	}
	
	public static boolean createFriend(String token, int id) throws BDException{
		try{
			int moi=Session.getIdUser(token);
			if(moi == -1 )
				throw new BDException("Pas connecter");
			
			
			if(UserTools.userExists(id) && id!=moi && !isFriend(token, id)){
				Class.forName("com.mysql.jdbc.Driver").newInstance();
				Connection c = Database.getMySQLConnection();

				String query = "INSERT INTO `Friends`(`from`, `to`) VALUES (?,?)";
				PreparedStatement pstmt = c.prepareStatement(query);
				
				pstmt.setInt(1,moi);
				pstmt.setInt(2, id);

				pstmt.executeUpdate();
							
				pstmt.close();
				c.close();
				
				return true;
			}
		}catch(Exception e){
			throw new BDException("Echec creation friend "+e.getMessage());
		}
		return false;
	}
	
	public static boolean isFriend(int id1,int id) throws BDException{

		try{	
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			Connection c = Database.getMySQLConnection();


			String query = "SELECT * FROM Friends WHERE `from`=? AND `to`=?";
			PreparedStatement pstmt = c.prepareStatement(query);
		
			pstmt.setInt(1,id1);
			pstmt.setInt(2, id);
			
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()){
				rs.close();
				pstmt.close();
				c.close();
			
				return true;
			}
			
			rs.close();
			pstmt.close();
			c.close();
			
			return false;

		}catch(Exception e){
			throw new BDException(e.getMessage());
		}
		
	}
	
	public static boolean isFriend(String token,int id) throws BDException{

		try{
			int moi=Session.getIdUser(token);
			if(moi == -1 )
				throw new BDException("Pas connecter");
			
			return isFriend(moi, id);

		}catch(Exception e){
			throw new BDException(e.getMessage());
		}
		
	}
	
	public static boolean deleteFriend(String token, int id) throws BDException{
		try{
			int moi=Session.getIdUser(token);
			if(moi == -1 )
				throw new BDException("Pas connecter");
			
			
			if(UserTools.userExists(id)  && isFriend(token, id)){
				Class.forName("com.mysql.jdbc.Driver").newInstance();
				Connection c = Database.getMySQLConnection();

				String query = "DELETE FROM `Friends` WHERE `from`=? AND `to`=?";
				PreparedStatement pstmt = c.prepareStatement(query);

				pstmt.setInt(1,moi);
				pstmt.setInt(2, id);
				pstmt.executeUpdate();
				
				pstmt.close();
				c.close();
							
				return true;
			}
		}catch(Exception e){
			throw new BDException("Echec creation friend"+e.getMessage());
		}
		return false;
		
	}
	
	
}
